(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var domready = require('domready');
var raf = require('raf');
var ColorUI = require('./ui');
var Sound = require('./sound');
var Input = require('./input');


/**
 * Called when the DOM is ready
 */
domready(function() {
  var url = 'assets/sand.mp3';
  var el = document.body;
  var ctx;

  // Test the capabilities of the phone
  // There should be available
  //  - WebAudioContext
  //  - DeviceMotion
  try {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    ctx = new AudioContext();
  } catch(e) {
    return alert('your device does not support audiocontext, maybe try newest chrome!');
  }

  if(!window.DeviceMotionEvent) {
    return alert('Hmm, your device does not support DeviceMotion. This is needed :(');
  }
  ctx = null;


  var input = new Input({ dom: el });
  var ui = new ColorUI({ dom: el, });
  var sound = new Sound({
    url: url,
    volumne: 0.5
  });

  // Event bindings. Bind events that are emitted by
  // input module that controlls the sound and ui
  input.on('start', function() {
    sound.onStart();
  });
  input.on('move', function() {
    sound.onMove();
    ui.draw();
  });
  input.on('not-moving', function() {
    sound.onNotMove();
  });
  input.on('end', function() {
    sound.onEnd();
  });

  /**
   * EventHandler function for DeviceMotion
   *
   * @param {DeviceMotionEvent} e
   */
  function deviceMotionHandler(e) {
    e.preventDefault();
    ui.handleMotionEvent(e);
    input.handleMotionEvent(e);
  }

  /**
   * EventHandler function for DevieOrientation
   *
   * @param {DeviceOrientationEvent} e
   */
  function devOrientHandler(e) {
    e.preventDefault();
    input.handleOrientationEvent(e);
  }

  // DOM event binding
  if(window.DeviceMotionEvent) {
    window.addEventListener('devicemotion', deviceMotionHandler, false);
  }

  if (window.DeviceOrientationEvent) {
    window.addEventListener('deviceorientation', devOrientHandler, false);
  }
});


},{"./input":2,"./sound":3,"./ui":4,"domready":7,"raf":9}],2:[function(require,module,exports){

var inherits = require('inherits');
var EventEmitter = require('events').EventEmitter;

module.exports = Input;

/**
 * Handling input events from the DOM
 * and controlling the other elements (Sound/Ui)
 * by events that should listen on that events
 *
 * @param {Object} opts options
 */
function Input(opts) {
  EventEmitter.call(this);
  opts = opts || {};

  this.dom = opts.dom;

  this.isMoving = false;
  this.lastOrient = {a: 0, b: 0};
  this.lastGrav = {x: 0, b: 0};

  this.dom.addEventListener('touchstart', this.onTouchStart.bind(this), false);
  this.dom.addEventListener('touchmove', this.onTouchMove.bind(this), false);
  this.dom.addEventListener('touchend', this.onTouchEnd.bind(this), false);

  this.dom.onselectstart = function() {return false;};
}

inherits(Input, EventEmitter);

/**
 * Handle the DeviceMotionEvent from the DOM
 * and calculates the accecelation if the phone
 * is still moving.
 *
 * @param {DeviceMotionEvent} e
 */
Input.prototype.handleMotionEvent = function onDeviceMotion(e) {
  var x = Math.abs((e.acceleration && e.acceleration.x || 0).toFixed(1));
  if(Math.abs(this.lastGrav.x - x) > 3) {
    if(!this.isMoving) {
      this.isMoving = true;
    }
  }

  this.lastGrav.x = x;
};

/**
 * Handles the DeviceOrientationEvent and
 * calcs the movement of the phone.
 *
 * If the relative movement is greater than 1
 * it declares "the phone is moving"
 *
 * @param {DeviceOrientationEvent} e
 */
Input.prototype.handleOrientationEvent = function handleOrientationEvent(e) {
  var a = parseFloat(e.alpha).toFixed(2);
  var b = parseFloat(e.beta).toFixed(2);
  if(Math.abs(this.lastOrient.a - a) > 1 || Math.abs(this.lastOrient.b - b) > 1) {
    this.isMoving = true;
  } else {
    this.isMoving = false;
  }

  this.lastOrient.a = a;
  this.lastOrient.b = b;
};

/**
 * Handles the `touchstart` event
 *
 * @param {Event} e
 */
Input.prototype.onTouchStart = function onTouchStart(e) {
  e.preventDefault();
  this.emit('start');
};

/**
 * Handles the `touchmove` event
 *
 * @param {Event} e
 */
Input.prototype.onTouchMove = function onTouchMove(e) {
  e.preventDefault();
  if(this.isMoving) {
    this.emit('move');
  } else {
    this.emit('not-moving');
  }
};

/**
 * Handles the `touchend` event
 *
 * @param {Event} e
 */
Input.prototype.onTouchEnd = function onTouchEnd(e) {
  e.preventDefault();
  this.emit('end');
};

},{"events":5,"inherits":8}],3:[function(require,module,exports){

module.exports = Sound;

/**
 * Class to handle the loading of a sound
 * and playing it back.
 * Pauses the sound and restarts it if needed.
 *
 * @param {Object} opts optios
 */
function Sound(opts) {
  opts = opts || {};

  this.volume = opts.volume || 0.5;
  this.url = opts.url;

  this.ctx = new AudioContext();
  this.muteRate = 0.000000001;
  this.playRate = 1;

  if(this.ctx.createGain) {
    this.gainNode = this.ctx.createGain();
  } else {
    this.gainNode = this.ctx.createGainNode(); // for old webkit version
  }
  this.gainNode.gain.value = this.volume;
  this.gainNode.connect(this.ctx.destination);

  this.loadSource(this.url, this.onSoundLoaded.bind(this));
}

/**
 * Loads the sound file from the remove location
 * and calls a callback with the source when done.
 *
 * Implments a caching mechanism, by storing the loaded
 * sound in a local variable, which can be used for the
 * next createBufferSource() call
 *
 * @param {String} url the url of the sound file
 * @param {Function} cb Callback called when sound is loaded
 */
Sound.prototype.loadSource = function loadSource(url, cb) {
  if(this.storedBuffer) {
    return cb(null, this.createSource(this.storedBuffer).bind(this));
  }

  var _this = this;
  var request = new XMLHttpRequest();
  request.open('GET', url, true);
  request.responseType = 'arraybuffer';
  request.onload = function onLoad() {
    _this.ctx.decodeAudioData(
      request.response,
      function onSuccess(buf) {
        _this.storedBuffer = buf;
        return cb(null, _this.createSource(buf));
      },
      function onError(err) {
        console.log('error loading sound :(');
      }
    );
  };

  request.send();
};

/**
 * Helper function to create the buffersource
 * from the arraybuffer.
 *
 * @param {Buffer} buf the sound as buffer
 * @return {AudioBufferSourceNode} playable ready sound context
 */
Sound.prototype.createSource = function createSource(buf) {
  var source = this.ctx.createBufferSource();
  source.buffer = buf;
  source.connect(this.gainNode);
  source.loop = true;
  source.looping = true; // for old webkit version

  return source;
};

/**
 * Interal callback after a sound was initially loaded
 * from the remote location
 *
 * @param {Error} err
 * @param {AudioBufferSourceNode} sound
 */
Sound.prototype.onSoundLoaded = function onSoundLoaded(err, sound) {
  if(err) {
    return console.log('Oops, error loading sound :(');
  }

  this.sound = sound;
  this.sound.playbackRate.value = this.muteRate;
  this.sound.start(0);
};


/**
 * Starts to play the sound by setting
 * the playback speed to 1 (normal speed)
 *
 * @param {Event} e
 */
Sound.prototype.onStart = function onStart(e) {
  this.sound.playbackRate.value = this.playRate;
};

/**
 * Stops the playback of the sound
 *
 * @param {Event} e
 */
Sound.prototype.onEnd = function onEnd(e) {
  if(this.sound) {
    this.sound.playbackRate.value = this.muteRate;
  }
};

/**
 * Handler to make sure, that the playback rate
 * is at normal speed when the phone is moving
 *
 * @param {Event} e
 */
Sound.prototype.onMove = function onMove(e) {
  this.sound.playbackRate.value = this.playRate;
};

/**
 * Handler when the phone is not moving anymore
 *
 * Reduces the speed of the sound to indicate the
 * user that he is not moving (enough) the phone
 */
Sound.prototype.onNotMove = function onNotMove() {
  this.sound.playbackRate.value -= 0.2;
};

},{}],4:[function(require,module,exports){

module.exports = ColorUI;

var round = Math.round;
var abs = Math.abs;

/**
 * Class to calculate the color if the screen
 * based on the movement of the phone
 *
 * Also draws the color the given DOM element
 *
 * @param {Object} opts options
 */
function ColorUI(opts) {
  this.dom = opts.dom || document.body;
  // acceleration
  this.aa = 0;
  this.ab = 0;
  this.ag = 0;
}

/**
 * Handles the DeviceMotionEvent and uses
 * the acceleration values to calc the accelation
 * on each axis and with the rotation data the other.
 *
 * @param {DeviceMotionEvent} e
 */
ColorUI.prototype.handleMotionEvent = function handleEvent(e) {
  var rr = e.rotationRate;
  if(rr !== null) {
    this.aa = round(rr.alpha);
    this.ab = round(rr.beta);
    this.ag = round(rr.gamma);
  }
};

/**
 * Draws the screen background and font color
 * based on the acceleration values
 *
 * The background color is tuned to look nice.
 * the conf color is the inversed color of the
 * background color, so a high contrast should be visible
 */
ColorUI.prototype.draw = function draw() {
  var color = this.makeColor(this.aa, this.ab, this.ag);

  this.dom.style.backgroundColor = '#' +
    (color[0].toString(16)).substr(1) +
    (color[1].toString(16)).substr(1) +
    (color[2].toString(16)).substr(1);

  this.dom.style.color = '#'+
    ((512 -color[0]).toString(16)).substr(1) +
    ((512 -color[1]).toString(16)).substr(1) +
    ((512 -color[2]).toString(16)).substr(1);
};

/**
 * Create a color based on the acceleration alpha/beta/gamme
 * values and returns a array of integers for RGB
 *
 * @param {Number} a acceleration alpha
 * @param {Number} b acceleration beta
 * @param {Number} g acceleration gamma
 * @return {Array} if ints [r, g, b]
 */
ColorUI.prototype.makeColor = function makeColor(a, b, g) {
  var red = abs(a*100) % 255;
  var green = abs(b*100) % 255;
  var blue = abs(g*100) % 255;
  var bright = 60;

  return [
    (0|(1<<8) + red + (256 - red) * bright / 100),
    (0|(1<<8) + green + (256 - green) * bright / 100),
    (0|(1<<8) + blue + (256 - blue) * bright / 100)
  ];
};


},{}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],6:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],7:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2014 - License MIT
  */
!function (name, definition) {

  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()

}('domready', function () {

  var fns = [], listener
    , doc = document
    , hack = doc.documentElement.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)


  if (!loaded)
  doc.addEventListener(domContentLoaded, listener = function () {
    doc.removeEventListener(domContentLoaded, listener)
    loaded = 1
    while (listener = fns.shift()) listener()
  })

  return function (fn) {
    loaded ? setTimeout(fn, 0) : fns.push(fn)
  }

});

},{}],8:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],9:[function(require,module,exports){
var now = require('performance-now')
  , global = typeof window === 'undefined' ? {} : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = global['request' + suffix]
  , caf = global['cancel' + suffix] || global['cancelRequest' + suffix]

for(var i = 0; i < vendors.length && !raf; i++) {
  raf = global[vendors[i] + 'Request' + suffix]
  caf = global[vendors[i] + 'Cancel' + suffix]
      || global[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(global, fn)
}
module.exports.cancel = function() {
  caf.apply(global, arguments)
}

},{"performance-now":10}],10:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,require('_process'))
},{"_process":6}]},{},[1]);
